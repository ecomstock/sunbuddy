{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Copyright","variant","color","align","href","Date","getFullYear","useStyles","makeStyles","theme","root","height","image","backgroundImage","backgroundRepeat","backgroundColor","palette","type","grey","backgroundSize","backgroundPosition","paper","display","flexDirection","alignItems","justifyContent","avatar","margin","spacing","secondary","main","black","fontWeight","light","thin","App","classes","conditions","uv","temp","precip","useState","city","setCity","currentTemp","setCurrentTemp","minTemp","setMinTemp","maxTemp","setMaxTemp","day","getDay","daylightHours","setDaylightHours","exposureTime","setExposureTime","precipTime","setPrecipTime","tempTime","setTempTime","useEffect","getNav","navigator","geolocation","getCurrentPosition","getLatLon","position","coords","latitude","longitude","getCity","getWeatherData","lat","lon","url","fetch","then","response","json","result","City","res","exportData","data","sunData","getSunData","Math","round","currently","temperature","today","daily","hourly","displayCurrent","displayHiLo","filterHoursByDay","sunCalc","require","todayData","getTimes","tomorrow","setDate","getDate","tomorrowData","dusk","date","dawn","displaySunData","temperatureMin","temperatureMax","hours","filter","hour","time","getReadableTime","toLocaleTimeString","timeStyle","readable","map","getHours","filterForCondition","condition","field","filtered","eval","checkAllDay","unfiltered","length","displayAllDay","getFilteredTimes","times","sortTimes","now","earliest","latest","i","convertTime","convertEarliest","convertEarliestPlusOne","amPm","container","component","className","item","xs","sm","md","Paper","elevation","square","mt","primary","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"gjFAoBA,SAASA,YACL,OACI,2DAAC,6DAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,MAAM,UACvD,kBACD,2DAAC,sDAAD,CAAMD,MAAM,UAAUE,KAAK,IAA3B,YAEQ,KACP,IAAIC,MAAOC,eAKpB,IAAMC,UAAYC,kEAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,OAAQ,SAEZC,MAAO,CAEHC,gBAAiB,+CACjBC,iBAAkB,YAClBC,gBAC2B,SAAvBN,EAAMO,QAAQC,KAAkBR,EAAMO,QAAQE,KAAK,KAAOT,EAAMO,QAAQE,KAAK,IACjFC,eAAgB,QAChBC,mBAAoB,UAExBC,MAAO,CAEHV,OAAQ,QACRW,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,UAEpBC,OAAQ,CACJC,OAAQlB,EAAMmB,QAAQ,GACtBb,gBAAiBN,EAAMO,QAAQa,UAAUC,MAE7CC,MAAO,CACHC,WAAY,KAEhBC,MAAO,CACHD,WAAY,KAEhBE,KAAM,CACFF,WAAY,SAIL,SAASG,MACpB,IAAMC,QAAU7B,YAEV8B,WAAa,CACrBC,GAAS,oBACTC,KAAS,iEACTC,OAAS,mEANmB,UASFC,sDATE,0LASnBC,KATmB,cASbC,QATa,yBAUYF,sDAVZ,2LAUnBG,YAVmB,cAUNC,eAVM,yBAWIJ,sDAXJ,2LAWnBK,QAXmB,cAWVC,WAXU,yBAYIN,sDAZJ,2LAYnBO,QAZmB,cAYVC,WAZU,yBAaJR,sDAbI,4LAanBS,IAbmB,eAadC,OAbc,2BAcgBV,sDAdhB,6LAcnBW,cAdmB,eAcJC,iBAdI,2BAecZ,sDAfd,6LAenBa,aAfmB,eAeLC,gBAfK,2BAgBUd,sDAhBV,6LAgBnBe,WAhBmB,eAgBPC,cAhBO,2BAiBMhB,sDAjBN,6LAiBnBiB,SAjBmB,eAiBTC,YAjBS,eAmB1BC,sDAAU,WACNC,YAGJ,IAAMA,OAAS,kBAAMC,UAAUC,YAAYC,mBAAmBC,YAExDA,UAAY,SAAAC,GACpB,IAAMC,EAAS,GACfA,EAAOC,SAAYF,EAASC,OAAOC,SACnCD,EAAOE,UAAYH,EAASC,OAAOE,UAC7BC,QAAQH,GACdI,eAAeJ,IAGPG,QAAU,SAAAH,GAClB,IAAMK,EAAML,EAAOC,SACbK,EAAMN,EAAOE,UACbK,EAAG,sEAAkEF,EAAlE,sBAAmFC,EAAnF,gBACTE,MAAMD,EAAK,CACV,OAAU,MACV,QAAW,CACV,kBAAmB,4BACnB,iBAAkB,wDAGnBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACI,IAAMrC,EAAOqC,EAAO,GAAGC,KACvBrC,QAAQD,OAMb6B,eAAiB,SAAAJ,GACtB,IAAMK,EAAML,EAAOC,SACbK,EAAMN,EAAOE,UACbK,EAAG,gHAA4GF,EAA5G,YAAmHC,GAC5HE,MAAMD,GACJE,MAAK,SAAAK,GAAG,OAAIA,EAAIH,UAChBF,MACA,SAACG,GACeG,WAAWf,EAAQY,OAc7BG,WAAa,SAACf,EAAQgB,GAC9B,IAAMC,EAAUC,WAAWlB,GACrBvB,EAAc0C,KAAKC,MAAMJ,EAAKK,UAAUC,aACxCC,EAAQP,EAAKQ,MAAMR,KAAK,GACxBS,EAAST,EAAKS,OAAOT,KAC3BU,eAAejD,GACfkD,YAAYJ,GACZK,iBAAiBH,EAAQR,IAGjBC,WAAa,SAAAlB,GACrB,IAAM6B,EAAUC,oBAAQ,IAClBzB,EAAML,EAAOC,SACbK,EAAMN,EAAOE,UACbqB,EAAQ,IAAIrF,KACZ6F,EAAYF,EAAQG,SAAST,EAAOlB,EAAKC,GACzC2B,EAAW,IAAI/F,KAAKqF,GAC1BU,EAASC,QAAQD,EAASE,UAAY,GACtC,IAAMC,EAAeP,EAAQG,SAASC,EAAU5B,EAAKC,GAE/CW,EAAU,GAahB,OAZIM,EAFSQ,EAAUM,MAGtBpB,EAAQlC,IAAM,QACdkC,EAAQqB,KAAOf,EACfN,EAAQsB,KAAOR,EAAUQ,KACzBtB,EAAQoB,KAAON,EAAUM,OAEzBpB,EAAQlC,IAAM,WACdkC,EAAQqB,KAAOL,EACfhB,EAAQsB,KAAOH,EAAaG,KAC5BtB,EAAQoB,KAAOD,EAAaC,MAE7BG,eAAevB,GACRA,GAGCS,eAAiB,SAAAjD,GAAW,OAAIC,eAAeD,IAE/CkD,YAAc,SAAAJ,GAChB,IAAM5C,EAAUwC,KAAKC,MAAMG,EAAMkB,gBAC3B5D,EAAUsC,KAAKC,MAAMG,EAAMmB,gBACjC9D,WAAWD,GACXG,WAAWD,IAGT+C,iBAAmB,SAACH,EAAQR,GACpC,IAAMqB,EAAOrB,EAAQqB,KAAKtD,SACpB2D,EAAQlB,EACZmB,QAAO,SAAAC,GAAI,OAAI,IAAI3G,KAAiB,IAAZ2G,EAAKC,MAAa9D,WAAasD,KACzDS,gBAAgBJ,EAAO1B,IAGfuB,eAAiB,SAAAvB,GACnB,IAAMlC,EAAMkC,EAAQlC,IACpBwD,EAAO,IAAIrG,KAAK+E,EAAQsB,MAAMS,mBAAmB,GAAI,CAACC,UAAW,UAC3DZ,EAAO,IAAInG,KAAK+E,EAAQoB,MAAMW,mBAAmB,GAAI,CAACC,UAAW,UACvEjE,OAAOD,GACPG,iBAAiB,GAAD,OAAIqD,EAAJ,cAAcF,KAG5BU,gBAAkB,SAAAtB,GAC1B,IAAMyB,EAAWzB,EACf0B,KAAI,SAAAN,GAAI,4KAASA,EAAT,CAAeC,KAAM,IAAI5G,KAAiB,IAAZ2G,EAAKC,MAAaM,gBAC1DC,mBAAmBH,EAAUhF,WAAWC,GAAI,gBAC5CkF,mBAAmBH,EAAUhF,WAAWG,OAAQ,cAChDgF,mBAAmBH,EAAUhF,WAAWE,KAAM,aAGtCiF,mBAAqB,SAArBA,mBAAsBrC,KAAMsC,UAAWC,OAC/C,IAAMC,SAAWxC,KACf4B,QAAO,SAAAC,MAAI,OAAKY,KAAKH,cACvBI,YAAY1C,KAAMwC,SAAUD,QAGpBG,YAAc,SAACC,EAAYH,EAAUD,GACzCC,EAASI,SAAWD,EAAWC,OAClCC,cAAcN,GAEdO,iBAAiBN,EAAUD,IAIpBM,cAAgB,SAAAN,GACxB,OAAQA,GACE,IAAK,eACDnE,gBAAgB,WAChB,MACJ,IAAK,aACDE,cAAc,WACd,MACJ,IAAK,WACDE,YAAY,aAOlBsE,iBAAmB,SAAC9C,EAAMuC,GAClC,IAAMQ,EAAQ/C,EACZmC,KAAI,SAAAN,GAAI,OAAIA,EAAKC,QACnBkB,UAAUD,EAAOR,IAGTS,UAAY,SAACD,EAAOR,GAC5B,GAAqB,IAAjBQ,EAAMH,OAAV,CAQA,IAPA,IAAMK,GAAM,IAAI/H,MAAOkH,WACnBc,EAAWH,EAAM,GACjBI,EAASD,EACTN,EAASG,EAAMH,OACfhD,EAAS,GAGJwD,EAAI,EAAGA,EAAIR,EAAQQ,IAE3B,GAAIL,EAAMK,KAAOD,EAAS,EACzBA,EAASJ,EAAMK,OACT,CACN,GAAIF,IAAaC,EAMhBvD,IALIsD,IAAaD,EACD,gBAAYI,YAAYJ,EAAM,IAE9B,UAAMI,YAAYH,GAAlB,cAAiCG,YAAYH,EAAW,KAE5C,UAQ5BtD,IANIsD,IAAaD,EACD,SAEA,UAAMI,YAAYH,GAAlB,QAEIG,YAAYF,GACY,KAI7CA,EADAD,EAAWH,EAAMK,GAKnB,GAAIF,IAAaC,EAAQ,CACxB,IAAIG,EAAkBD,YAAYH,GAC9BK,EAAyBF,YAAYH,EAAW,GACpDtD,GAAM,UAAO0D,EAAP,cAA4BC,OAC5B,CAGN3D,GAFe,UAAMyD,YAAYH,GAAlB,OACKG,YAAYF,EAAS,GAGpC,OAAQZ,GACJ,IAAK,eACDnE,gBAAgBwB,GAChB,MACJ,IAAK,aACDtB,cAAcsB,GACd,MACJ,IAAK,WACDpB,YAAYoB,MAOlByD,YAAc,SAAAvB,GACtB,IAAM0B,EAAO1B,GAAQ,IAAMA,EAAO,GAAK,KAAO,KAG9C,MADgB,UADGA,EAAO,IAAO,GACjB,eAAsB0B,IAIpC,OACI,2DAAC,sDAAD,CAAMC,WAAS,EAACC,UAAU,OAAOC,UAAW1G,QAAQ1B,MAChD,2DAAC,6DAAD,MACA,2DAAC,sDAAD,CAAMqI,MAAI,EAACC,IAAI,EAAOC,GAAI,EAAGC,GAAI,EAAGJ,UAAW1G,QAAQxB,QACvD,2DAAC,sDAAD,CAAMmI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGL,UAAWM,uDAAOC,UAAW,EAAGC,QAAM,GACnE,kEAAKP,UAAW1G,QAAQf,OACpB,2DAAC,6DAAD,CAAYwH,UAAU,KAAK5I,QAAQ,YAAnC,YACA,2DAAC,qDAAD,CAAKqJ,GAAI,GACL,2DAAC,6DAAD,CAAYR,UAAW1G,QAAQF,KAAM2G,UAAU,KAAK5I,QAAQ,MAAMyC,OAEtE,2DAAC,6DAAD,CAAamG,UAAU,KAAK5I,QAAQ,SAASiD,KAC7C,2DAAC,qDAAD,CAAKoG,GAAI,GACL,2DAAC,sDAAD,CAAMV,WAAS,EAACpH,WAAW,SAASI,QAAS,GACzC,2DAAC,sDAAD,CAAMmH,MAAI,GACN,2DAAC,6DAAD,CAAYD,UAAW1G,QAAQL,MAAO8G,UAAU,IAAI5I,QAAQ,QAAQC,MAAM,WAAW4C,UAEzF,2DAAC,sDAAD,CAAMiG,MAAI,GACN,2DAAC,6DAAD,CAAYF,UAAU,IAAI5I,QAAQ,MAAc,UAARiD,IAAkBN,YAAc,MAE5E,2DAAC,sDAAD,CAAMmG,MAAI,GACN,2DAAC,6DAAD,CAAYD,UAAW1G,QAAQL,MAAO8G,UAAU,IAAI5I,QAAQ,QAAQC,MAAM,SAAS8C,YAI/F,2DAAC,sDAAD,KACI,2DAAC,2DAAD,KACI,2DAAC,iEAAD,KACA,2DAAC,wDAAD,KACI,2DAAC,mEAAD,QAGJ,2DAAC,+DAAD,CACIuG,QAASnG,cACTvB,UAAU,oBAGlB,2DAAC,2DAAD,KACI,2DAAC,iEAAD,KACA,2DAAC,wDAAD,KACI,2DAAC,oEAAD,QAGJ,2DAAC,+DAAD,CACI0H,QAAS/F,WACT3B,UAAS,uCAAkC2B,WAAU,SAA5C,gBAGjB,2DAAC,2DAAD,KACI,2DAAC,iEAAD,KACA,2DAAC,wDAAD,KACI,2DAAC,mEAAD,QAGJ,2DAAC,+DAAD,CAAc+F,QAASjG,aAAczB,UAAS,uBAAkByB,aAAY,gCAEhF,2DAAC,2DAAD,KACI,2DAAC,iEAAD,KACA,2DAAC,wDAAD,KACI,2DAAC,yEAAD,QAGJ,2DAAC,+DAAD,CACIiG,QAAS7F,SACT7B,UAAS,UAAK6B,SAAQ,0EAIlC,2DAAC,qDAAD,CAAK4F,GAAI,GACL,2DAACtJ,UAAD,Y,qJClXJwJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC3H,EAAA,EAAD,MAAS4H,SAASC,eAAe,SD2H3C,kBAAmBlG,WACrBA,UAAUmG,cAAcC,MAAMtF,MAAK,SAAAuF,GACjCA,EAAaC,kB","file":"static/js/main.a50b08e4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Fade from '@material-ui/core/Fade';\nimport Avatar from '@material-ui/core/Avatar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\nimport WbCloudyIcon from '@material-ui/icons/WbCloudy';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n        {'Copyright Â© '}\n        <Link color=\"inherit\" href=\"\">\n            Sunbuddy\n        </Link>{' '}\n        {new Date().getFullYear()}\n        </Typography>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: '100vh',\n    },\n    image: {\n        //backgroundImage: 'url(https://source.unsplash.com/J0wKylnjtNo)',\n        backgroundImage: 'url(https://source.unsplash.com/AtfA8NDgpKA)',\n        backgroundRepeat: 'no-repeat',\n        backgroundColor:\n            theme.palette.type === 'dark' ? theme.palette.grey[900] : theme.palette.grey[50],\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n    },\n    paper: {\n        //margin: theme.spacing(6, 4),\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    black: {\n        fontWeight: 900,\n    },\n    light: {\n        fontWeight: 300,\n    },\n    thin: {\n        fontWeight: 100,\n    },\n}));\n\nexport default function App() {\n    const classes = useStyles();\n\n    const conditions = {\n\t\tuv     : \"hour.uvIndex >= 4\", \n\t\ttemp   : \"hour.apparentTemperature < 70 && hour.apparentTemperature > 32\",\n\t\tprecip : \"hour.precipIntensity >= 0.015 && hour.precipProbability >= 0.20\"\n    }\n    \n    const [city, setCity] = useState();\n    const [currentTemp, setCurrentTemp] = useState();\n    const [minTemp, setMinTemp] = useState();\n    const [maxTemp, setMaxTemp] = useState();\n    const [day, getDay] = useState();\n    const [daylightHours, setDaylightHours] = useState();\n    const [exposureTime, setExposureTime] = useState();\n    const [precipTime, setPrecipTime] = useState();\n    const [tempTime, setTempTime] = useState();\n\n    useEffect(() => {\n        getNav();\n    });\n\n    const getNav = () => navigator.geolocation.getCurrentPosition(getLatLon);\n\n    const getLatLon = position => {\n\t\tconst coords = {};\n\t\tcoords.latitude  = position.coords.latitude;\n\t\tcoords.longitude = position.coords.longitude;\n        getCity(coords);\n\t\tgetWeatherData(coords);\n    }\n    \n    const getCity = coords => {\n\t\tconst lat = coords.latitude;\n\t\tconst lon = coords.longitude; \n\t\tconst url = `https://geocodeapi.p.rapidapi.com/GetLargestCities?latitude=${lat}&longitude=${lon}&range=50000`\n\t\tfetch(url, {\n\t\t\t\"method\": \"GET\",\n\t\t\t\"headers\": {\n\t\t\t\t\"x-rapidapi-host\": \"geocodeapi.p.rapidapi.com\",\n\t\t\t\t\"x-rapidapi-key\": \"G0GBgJ6WYSmshKfgZydJ6iBoKrThp11fTNTjsnljvjz33JtipZ\"\n\t\t\t}\n\t\t})\n\t\t.then(response => response.json())\n\t\t.then(result => {\n            const city = result[0].City;\n            setCity(city);\n\t\t})\n\t\t// .catch(err => {\n\t\t// });\n\t}\n\t\n\tconst getWeatherData = coords => {\n\t\tconst lat = coords.latitude;\n\t\tconst lon = coords.longitude;\n\t\tconst url = `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/c9390ab45282a0eb042232d180560a3d/${lat},${lon}`;\n\t\tfetch(url)\n\t\t\t.then(res => res.json())\n\t\t\t.then(\n\t\t\t\t(result) => {\n                    exportData(coords, result);\n\t\t\t\t},\n\t\t\t\t// Note: it's important to handle errors here\n\t\t\t\t// instead of a catch() block so that we don't swallow\n\t\t\t\t// exceptions from actual bugs in components.\n\t\t\t\t// (error) => {\n\t\t\t\t// this.setState({\n\t\t\t\t// \tisLoaded: true,\n\t\t\t\t// \terror\n\t\t\t\t// });\n\t\t\t\t// }\n\t\t\t)\n    }\n    \n    const exportData = (coords, data) => {\n\t\tconst sunData = getSunData(coords);\n\t\tconst currentTemp = Math.round(data.currently.temperature);\n\t\tconst today = data.daily.data[0];\n\t\tconst hourly = data.hourly.data;\n\t\tdisplayCurrent(currentTemp);\n\t\tdisplayHiLo(today);\n\t\tfilterHoursByDay(hourly, sunData);\n    }\n    \n    const getSunData = coords => {\n\t\tconst sunCalc = require(\"suncalc\");\n\t\tconst lat = coords.latitude;\n\t\tconst lon = coords.longitude;\n\t\tconst today = new Date();\n\t\tconst todayData = sunCalc.getTimes(today, lat, lon);\n\t\tconst tomorrow = new Date(today);\n\t\ttomorrow.setDate(tomorrow.getDate() + 1);\n\t\tconst tomorrowData = sunCalc.getTimes(tomorrow, lat, lon);\n\t\tconst dusk = todayData.dusk;\n\t\tconst sunData = {};\n\t\tif (today < dusk) {\n\t\t\tsunData.day = \"today\";\n\t\t\tsunData.date = today;\n\t\t\tsunData.dawn = todayData.dawn;\n\t\t\tsunData.dusk = todayData.dusk;\n\t\t} else {\n\t\t\tsunData.day = \"tomorrow\";\n\t\t\tsunData.date = tomorrow;\n\t\t\tsunData.dawn = tomorrowData.dawn;\n\t\t\tsunData.dusk = tomorrowData.dusk;\n\t\t}\n\t\tdisplaySunData(sunData);\n\t\treturn sunData;\n    }\n    \n    const displayCurrent = currentTemp => setCurrentTemp(currentTemp);\n\n    const displayHiLo = today => {\n        const minTemp = Math.round(today.temperatureMin)\n        const maxTemp = Math.round(today.temperatureMax)\n        setMinTemp(minTemp);\n        setMaxTemp(maxTemp);\n    }\n    \n    const filterHoursByDay = (hourly, sunData) => {\n\t\tconst date = sunData.date.getDay();\n\t\tconst hours = hourly\n\t\t\t.filter(hour => new Date(hour.time * 1000).getDay() === date);\n\t\tgetReadableTime(hours, sunData);\n    }\n    \n    const displaySunData = sunData => {\n        const day = sunData.day;\n\t\tconst dawn = new Date(sunData.dawn).toLocaleTimeString([], {timeStyle: \"short\"});\n        const dusk = new Date(sunData.dusk).toLocaleTimeString([], {timeStyle: \"short\"});\n        getDay(day);\n        setDaylightHours(`${dawn} - ${dusk}`);\n    }\n    \n    const getReadableTime = hourly => {\n\t\tconst readable = hourly\n\t\t\t.map(hour => ({...hour, time: new Date(hour.time * 1000).getHours()}));\n\t\tfilterForCondition(readable, conditions.uv, \"exposureTime\");\n\t\tfilterForCondition(readable, conditions.precip, \"precipTime\");\n\t\tfilterForCondition(readable, conditions.temp, \"tempTime\");\n    }\n    \n    const filterForCondition = (data, condition, field) => {\n\t\tconst filtered = data\n\t\t\t.filter(hour => (eval(condition)));\n\t\tcheckAllDay(data, filtered, field);\n    }\n    \n    const checkAllDay = (unfiltered, filtered, field) => {\n\t\tif (filtered.length === unfiltered.length) {\n\t\t\tdisplayAllDay(field);\n\t\t} else {\n\t\t\tgetFilteredTimes(filtered, field);\n\t\t}\n    }\n    \n    const displayAllDay = field => {\n\t\tswitch (field) {\n            case \"exposureTime\":\n                setExposureTime(\"All day\");\n                break;\n            case \"precipTime\":\n                setPrecipTime(\"All day\");\n                break;\n            case \"tempTime\":\n                setTempTime(\"All day\");\n                break;\n            default:\n                break;\n        }\n    }\n    \n    const getFilteredTimes = (data, field) => {\n\t\tconst times = data\n\t\t\t.map(hour => hour.time);\n\t\tsortTimes(times, field);\n    }\n    \n    const sortTimes = (times, field) => {\n\t\tif (times.length === 0) return;\n\t\tconst now = new Date().getHours();\n\t\tlet earliest = times[0];\n\t\tlet latest = earliest; // assume singleton\n\t\tlet length = times.length;\n\t\tlet result = \"\";\n\t\tlet convertEarliest = \"\";\n\t\t\n\t\tfor (let i = 1; i < length; i++) { // start loop at 2nd time, end at penultimate\n\t\t\t\n\t\t\tif (times[i] === latest + 1) { // if next time is one greater than \"latest\",\n\t\t\t\tlatest = times[i]; // increment latest\n\t\t\t} else {\n\t\t\t\tif (earliest === latest) { // must be a singleton\n\t\t\t\t\tif (earliest === now) {\n\t\t\t\t\t\tconvertEarliest = `Until ${convertTime(now + 1)}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconvertEarliest = `${convertTime(earliest)} - ${convertTime(earliest + 1)}`;\n\t\t\t\t\t}\n\t\t\t\t\tresult += convertEarliest + ', '; // print and break for singleton  \n\t\t\t\t} else { // must be end of span\n\t\t\t\t\tif (earliest === now) {\n\t\t\t\t\t\tconvertEarliest = `Until `;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconvertEarliest = `${convertTime(earliest)} - `\n\t\t\t\t\t}\n\t\t\t\t\tlet convertLatest = convertTime(latest);\n\t\t\t\t\tresult += convertEarliest + convertLatest + ', '; // print and break for span\n\t\t\t\t}\n\t\t\t\t// begin new group\n\t\t\t\tearliest = times[i];\n\t\t\t\tlatest = earliest;\n\t\t\t}\n\t\t}\n\n\t\tif (earliest === latest) {\n\t\t\tlet convertEarliest = convertTime(earliest);\n\t\t\tlet convertEarliestPlusOne = convertTime(earliest + 1);\n\t\t\tresult += `${convertEarliest} - ${convertEarliestPlusOne}`; // print final singleton            \n\t\t} else {\n\t\t\tconvertEarliest = `${convertTime(earliest)} - `\n\t\t\tlet convertLatest = convertTime(latest + 1);\n\t\t\tresult += convertEarliest + convertLatest; // print final span\n\t\t}\n        switch (field) {\n            case \"exposureTime\":\n                setExposureTime(result);\n                break;\n            case \"precipTime\":\n                setPrecipTime(result);\n                break;\n            case \"tempTime\":\n                setTempTime(result);\n                break;\n            default:\n                break;\n        }\n    }\n    \n    const convertTime = time => {\n\t\tconst amPm = time >= 12 && time < 24 ? \"PM\" : \"AM\";\n\t\tconst converted = (time % 12) || 12;\n\t\tconst timeString = `${converted}:00 ${amPm}`;\n\t\treturn timeString;\n\t}\n\n    return (\n        <Grid container component=\"main\" className={classes.root}>\n            <CssBaseline />\n            <Grid item xs={false} sm={4} md={7} className={classes.image} />\n            <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n                <div className={classes.paper}>\n                    <Typography component=\"h1\" variant=\"overline\">sunbuddy</Typography>\n                    <Box mt={2}>\n                        <Typography className={classes.thin} component=\"h2\" variant=\"h4\">{city}</Typography>\n                    </Box>\n                    <Typography  component=\"h3\" variant=\"body2\">{day}</Typography>\n                    <Box mt={2}>\n                        <Grid container alignItems=\"center\" spacing={1}>\n                            <Grid item>\n                                <Typography className={classes.black} component=\"p\" variant=\"body1\" color=\"primary\">{minTemp}</Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography component=\"p\" variant=\"h4\">{day === \"today\" ? currentTemp : \"/\"}</Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography className={classes.black} component=\"p\" variant=\"body1\" color=\"error\">{maxTemp}</Typography>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                    <List>\n                        <ListItem>\n                            <ListItemAvatar>\n                            <Avatar>\n                                <WbSunnyIcon />\n                            </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={daylightHours} \n                                secondary=\"Daylight hours\" \n                            />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemAvatar>\n                            <Avatar>\n                                <WbCloudyIcon />\n                            </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={precipTime} \n                                secondary={`Significant precipitation is ${precipTime ? `` : `not`} expected`}\n                            />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemAvatar>\n                            <Avatar>\n                                <WarningIcon />\n                            </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText primary={exposureTime} secondary={`Sunscreen is ${exposureTime ? `advisable` : `not necessary`}`} />\n                        </ListItem>\n                        <ListItem>\n                            <ListItemAvatar>\n                            <Avatar>\n                                <DirectionsRunIcon />\n                            </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText \n                                primary={tempTime}\n                                secondary={`${tempTime ? `Favorable temperatures for outdoor exercise` : `Extreme temperatures`}`} \n                            />\n                        </ListItem>\n                    </List>\n                    <Box mt={2}>\n                        <Copyright />\n                    </Box>\n                </div>\n            </Grid>\n        </Grid>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}